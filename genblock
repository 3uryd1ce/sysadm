#!/usr/bin/env sh
# shellcheck disable=SC1090
set -e
# Copyright (c) 2020-2021 Ashlen <eurydice@riseup.net>

# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.

# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

# TODO:
# if a blocklist has been retrieved recently, use it instead of
# downloading a new one

# check that the library file is readable. if it is, source it so its
# functions are available. if not, exit due to potentially unpredictable
# behavior.
readonly library='/etc/sysadm/common.sh'

if [ -r "${library}" ]; then
  . "${library}"

else
  cat >&2 <<EOF
${library} doesn't exist or isn't readable.
${0##*/} may not function correctly without it; exiting for safety.
EOF

  exit 1

fi

backup() {
  if [ -f "${blocklist}" ]; then
     mv -- "${blocklist}" "${blocklist}.bak"

  else
    return 0

  fi
}

# for each domain with a hosts file that firebog.net contains, download
# and output the contents to STDOUT.
dl_blocklists() {
  if ftp -Vo - -- 'https://v.firebog.net/hosts/lists.php?type=tick'; then
    : # successfully fetched blocklists, so pass input to xargs(1)

  else
    err 'Unable to download blocklists.'

  fi | xargs ftp -o - --
}

# filter out localhost definitions in hosts files and grab the lines
# that begin with 0.0.0.0 or 127.0.0.1
#
# $1 is a file or STDIN.
grab_domains() {
  grep -v -- 'localhost$' "$1" \
    | grep -e '^0.0.0.0' -e '^127.0.0.1'
}

# convert grab_domains() output using awk(1) so either unwind(8) or
# unbound(8) can block those domains. remove carriage returns, sort
# domains, and filter out duplicate entries.
#
# unwind's configuration syntax is simple--one domain per line.
#
# unbound's configuration syntax is in the form:
# local-zone: "example.com" always_refuse
#
# $1 is a file or STDIN.
format_domains() {
  case "${dns}" in

    'unwind')
      {
        awk -- '$1 == "0.0.0.0" {print $2}' "$1"
        awk -- '$1 == "127.0.0.1" {print $2}' "$1"
        # https://support.mozilla.org/en-US/kb/canary-domain-use-application-dnsnet
        echo 'use-application-dns.net'
      }

      ;;

    'unbound')
      {
        awk -- '$1 == "0.0.0.0" {print "local-zone: \""$2"\" always_refuse"}' \
          "$1"
        awk -- '$1 == "127.0.0.1" {print "local-zone: \""$2"\" always_refuse"}' \
          "$1"
        # https://support.mozilla.org/en-US/kb/canary-domain-use-application-dnsnet
        echo 'local-zone: "use-application-dns.net" always_refuse'
      }

      ;;

    *)
      err "${0##*/} only supports unwind(8) and unbound(8)."

      ;;

  esac | dos2unix | sort | uniq
}

# copy the temporary blocklist to the destination and make it world
# readable.
install_blocklist() {
  cp -- "${tmp_blocklist}" "${blocklist}"
  chmod -- 0444 "${blocklist}"
}

# check that the configuration file is valid. if it is, restart the DNS
# server.
restart_dns() {
  case "${dns}" in
    'unwind')  unwind -n         && rcctl restart unwind              ;;
    'unbound') unbound-checkconf && rcctl restart unbound             ;;
    *)         err "${0##*/} only supports unwind(8) and unbound(8)." ;;
  esac
}

# called if restart_dns() fails. if a backup file exists, restore it.
# otherwise, remove the blocklist and create an empty world readable
# file in its place.
revert() {
  if [ -f "${blocklist}.bak" ]; then
    mv -- "${blocklist}.bak" "${blocklist}"

  else
    rm -- "${blocklist}"
    touch -- "${blocklist}"
    chmod -- 0444 "${blocklist}"

  fi
}

prereqs() {
  must_be_root
  echo 'dos2unix' | check_deps
}

prereqs

if [ "$(rcctl get unwind flags)" != 'NO' ]; then
  readonly dns='unwind'

elif [ "$(rcctl get unbound flags)" != 'NO' ]; then
  readonly dns='unbound'

else
  err 'Only unwind(8) and unbound(8) are supported. Enable one of them and try again.'

fi

case "${dns}" in
  'unwind')  readonly blocklist='/etc/blocklist.nwnd'        ;;
  'unbound') readonly blocklist='/etc/blocklist.nbnd'        ;;
  *)         err 'This error condition should never happen.' ;;
esac

tmp_blocklist="$(mktemp)" && readonly tmp_blocklist

dl_blocklists \
  | grab_domains - \
  | format_domains - \
  > "${tmp_blocklist}" \
  || err 'Unable to create blocklist.'

backup                      || err 'Unable to backup blocklist file.'
install_blocklist           || err 'Unable to install blocklist.'
restart_dns >/dev/null 2>&1 || revert
rm -- "${tmp_blocklist}"    || err "Unable to remove ${tmp_blocklist}."
