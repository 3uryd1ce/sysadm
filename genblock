#!/usr/bin/env perl
# Copyright (c) 2022 Ashlen <eurydice@riseup.net>

# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.

# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

use autodie;
use feature 'say';
use strict;
use warnings;

use experimental 'smartmatch';

# Extract file name.
use File::Basename 'fileparse';

# Parse command line options.
use Getopt::Std;

# uniq
use List::Util 'uniq';

our $opt_h;
our $opt_t = 'plain';

my @formats = qw(plain unbound);

my $program_name = fileparse $0;

sub usage {
	die <<"EOT";
$program_name extracts unique domains. Useful for generating blocklists.

usage: $program_name [-h] [-t type] [file (optional)] ...

-h: help.

-t: type of format, 'plain' by default.
    'plain' extracts one domain per line and does no other formatting.
    'unbound' formats the domain as 'local-zone: \"[domain]\" always_refuse'

$program_name reads from STDIN or a given file.
EOT
}

sub unique_domains {
	my @domains;

	while ( <<>> ) {
		## Don't process commented or blank lines.
		next if /\A \s*? [#]/ax;
		next if /\A \s* \z/ax;

		# Get rid of these common leading IP addresses in hosts(5)
		# formatted blocklists.
		s/\A \s*? 127\.0\.0\.1 \s*?//ax;
		s/\A \s*? 0\.0\.0\.0 \s*?//ax;

		# Lines with these IP addresses at the tail end of a word
		# (likely caused by maintainer typos) can't be trusted. Messing
		# with them is likely to mangle the line and give a bogus
		# result; accepting them is also likely to give a bogus result.
		#
		# Here are two examples of lines that match:
		# zy16eoat1w.com0.0.0.0 102.112.2o7.net
		# vungle.com0.0.0.0adminer.com
		next if /\B 127\.0\.0\.1/ax;
		next if /\B 0\.0\.0\.0/ax;

		# Lowercase vs uppercase doesn't matter for DNS.
		$_ = lc $_;

		#<<<
		if (/
			\b # word boundary

			### BEGIN DOMAINS BEFORE TOP-LEVEL DOMAIN ###
			(?: # begin noncapturing group
			[a-z0-9]+ # one or more lowercase or number characters

			### BEGIN OPTIONAL GROUP - HYPHENS AND UNDERSCORES
			(?: # begin noncapturing group
			[-_]+ # one or more hyphens or underscores
			[a-z0-9]+ # one or more lowercase or number characters
			)* # end of noncapturing group, matches zero or more times
			### END OPTIONAL GROUP - HYPHENS AND UNDERSCORES

			\. # period
			)+ # end noncapturing group, matches one or more times
			### END DOMAINS BEFORE TOP-LEVEL DOMAIN ###

			### TOP-LEVEL DOMAIN ###
			(?: # begin noncapturing group

			(?:xn-- # begin noncapturing group, punycode prefix
			[a-z0-9]+ # one or more lowercase or number characters
			) # end the punycode noncapturing group

			| # OR

			[a-z]{2,} # two or more lowercase characters
			) # end noncapturing group
			### END TOP-LEVEL DOMAIN ###

			\b # word boundary
		/axp)
		#>>>
		{
			push @domains, ${^MATCH};
		}
	}
	return uniq @domains;
}

getopts 'ht:';
usage if defined($opt_h);

$opt_t ~~ @formats or die "$opt_t is not a valid type.\n";
my @sorted_domains = sort &unique_domains;

if ( $opt_t eq 'plain' ) {
	say join "\n", @sorted_domains;
}
elsif ( $opt_t eq 'unbound' ) {
	say join "\n", map { "local-zone: \"$_\" always_refuse" } @sorted_domains;
}
