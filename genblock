#!/usr/bin/env sh
# shellcheck disable=SC1090
# Copyright (c) 2020-2021 Ashlen <eurydice@riseup.net>

# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.

# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

set -e

readonly LIBRARY='/etc/sysadm/common.sh'

if [ -r "${LIBRARY}" ]; then
  . "${LIBRARY}"

else
  cat >&2 <<EOF
${LIBRARY} doesn't exist or isn't readable.
${0##*/} may not function correctly without it.
EOF

  exit 1

fi


complain_dns() {
  err "${0##*/} only supports unwind(8) and unbound(8)."
}


rotate_old_blocklist() {
  # if no blocklist, just create a blank template file so mv(1) is
  # guaranteed to have something to move and ${blocklist}.bak is
  # guaranteed to exist.
  [ -f "${BLOCKLIST}" ] || :>"${BLOCKLIST}"

  chmod -- 0444 "${BLOCKLIST}"

  mv -- "${BLOCKLIST}" "${BLOCKLIST}.bak"
}


# grab the lines from a file formatted like hosts(5) that begin with
# 0.0.0.0 or 127.0.0.1 followed by one or more spaces or tabs, remove
# localhost definitions, remove carriage returns, ensure the delimiter
# is one tab for cut(1) with sed(1).
#
# $1 is a file or STDIN.
prepare_domains() {
  tab="$(printf '\t')"
  readonly tab

  grep -E "^(0\.0\.0\.0|127\.0\.0\.1)( |${tab})+" "$1" \
    | grep -v -- 'localhost$'                          \
    | tr -d '\r'                                       \
    | sed -E "s/( +|${tab}{2,})/${tab}/"
}


# convert prepare_domains() output so either unwind(8) or unbound(8) can
# block those domains. sort domains and filter out duplicate entries.
#
# unwind's configuration syntax is simple--one domain per line.
#
# unbound's configuration syntax is in the form:
# local-zone: "example.com" always_refuse
#
# $1 is a file or STDIN.
format_domains() {
  case "${DNS}" in

    # there are two identical cut(1) invocations in the 'unwind' and
    # 'unbound' patterns, but refactoring and moving them up into
    # prepare_domains() means that cat(1) would need to be added to the
    # 'unwind' pattern to handle STDIN.
    'unwind')
      cut -f 2 "$1"

      # https://support.mozilla.org/en-US/kb/canary-domain-use-application-dnsnet
      echo 'use-application-dns.net'

      ;;

    'unbound')
      cut -f 2 "$1" | sed 's/.*/local-zone: "&" always_refuse/'

      echo 'local-zone: "use-application-dns.net" always_refuse'

      ;;

    *)
      complain_dns

      ;;

  esac | sort -u
}


# copy the temporary blocklist to the destination.
#
# I do not really anticipate this error condition happening much since
# we are running as root, but if it does crop up the path of the
# temporary blocklist should be returned to the user.
install_new_blocklist() {
  if ! install -m 0444 -- "${TMP_BLOCKLIST}" "${BLOCKLIST}"; then
    err "Unable to install(1) ${TMP_BLOCKLIST} to ${BLOCKLIST}"
  fi
}


# check that the configuration file is valid. if it is, restart the DNS
# server.
restart_dns() {
  case "${DNS}" in
    'unwind')  unwind -n         && rcctl restart unwind  ;;
    'unbound') unbound-checkconf && rcctl restart unbound ;;
    *)         complain_dns                               ;;
  esac
}


# called if restart_dns() fails. restores the backup file.
restore_backup_blocklist() {
  # due to the way rotate_old_blocklist() works, ${blocklist}.bak should
  # always be a working file with appropriate permissions, so it is safe
  # to move ${blocklist}.bak to ${blocklist} without further checks.
  mv -- "${BLOCKLIST}.bak" "${BLOCKLIST}"

  # exits immediately without removing ${tmp_blocklist} and printing the
  # file in the error message so it can be inspected.
  err "restart_dns() failed, which probably means ${DNS}(8) didn't like ${TMP_BLOCKLIST}.

For now, either the previous working blocklist or a blank blocklist was
instated at ${BLOCKLIST} with appropriate permissions."
}


[ "$(uname)" = 'OpenBSD' ] || err "${0##*/} only supports OpenBSD."
must_be_root

if [ "$(rcctl get unwind flags)" != 'NO' ]; then
  readonly DNS='unwind'
  readonly BLOCKLIST='/etc/blocklist.unwind'

elif [ "$(rcctl get unbound flags)" != 'NO' ]; then
  readonly DNS='unbound'
  readonly BLOCKLIST='/etc/blocklist.unbound'

else
  complain_dns

fi

TMP_BLOCKLIST="$(mktemp)"
readonly TMP_BLOCKLIST

readonly BLOCKLIST_URLS='/etc/sysadm/blocklist_urls'

[ -r "${BLOCKLIST_URLS}" ] || err "${BLOCKLIST_URLS} isn't readable."

xargs -- ftp -o - -- 2>/dev/null \
  < "${BLOCKLIST_URLS}"          \
  | prepare_domains -            \
  | format_domains -             \
  > "${TMP_BLOCKLIST}"           \
  || err 'Unable to create blocklist.'

rotate_old_blocklist
install_new_blocklist

restart_dns >/dev/null 2>&1 || restore_backup_blocklist

# if restore_backup_blocklist() is called, it exits before the removal
# so the temporary blocklist is kept.
rm -- "${TMP_BLOCKLIST}"
