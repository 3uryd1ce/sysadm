#!/bin/sh
# shellcheck disable=SC1090
# Copyright (c) 2020-2022 Ashlen <eurydice@riseup.net>

# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.

# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

# post-receive for personal use, see githooks(5)

set -e


err() {
	printf '%s\n' "$*" >&2
	exit 1
}


complain_tmpdir() {
	err "Unable to create temporary directory at $1."
}


handle_tmpfiles() {
	rm -rf -- "${CLONE_DIR}" "${HTML_DIR}"
}


# TODO: make this less expensive--only new files should be regenerated.
gzip_site() {
	[ -d "$1" ] || err "$1 is not a directory."
	[ -r "$1" ] || err "$1 is not readable."
	[ -w "$1" ] || err "$1 is not writable."
	[ -x "$1" ] || err "$1 is not executable."

	find "$1" -type f ! -path '*/.git*' \( \
		-name '*.html' \
		-o -name '*.css' \
		-o -name '*.txt' \
		-o -name '*.xml' \
		-o -name '*.key' \
	\) -exec gzip -k -- '{}' +
}

# only called if working with website_md.
gen_website() {
	CLONE_DIR="$(mktemp -d)" || complain_tmpdir "${CLONE_DIR}"
	HTML_DIR="$(mktemp -d)" || complain_tmpdir "${HTML_DIR}"
	readonly CLONE_DIR HTML_DIR

	git clone -- "${BARE_SRCDIR}" "${CLONE_DIR}"

	"${HOME}/bin/ssg6" "${CLONE_DIR}" "${HTML_DIR}" "${WEBSITE##*//}" \
		"${WEBSITE}" >/dev/null

	rsync -a --delete --exclude='*.git' --exclude='*src/*' \
		--exclude='.files' -- "${HTML_DIR}/" "${WEBDIR}/"

	"${HOME}/bin/rssg" "${CLONE_DIR}/index.md" \
		"Newsletter - ${DESCRIPTION}" > "${WEBDIR}/rss.xml"

	gzip_site "${WEBDIR}"

	# Temporary directories have 700 permissions by default. Without a
	# chmod(1) here, the whole site will return 403 Forbidden after an
	# rsync(1).
	chmod 775 "${WEBDIR}"
}


# remove ${SYSADM_STAGE}, clone the source directory to ${SYSADM_STAGE},
# then synchronize changes to ${SYSADM_DIR} so as to minimize
# supervision/manual intervention.
update_sysadm() {
	readonly SYSADM_DIR='/etc/sysadm'
	CLONE_DIR="$(mktemp -d)" || complain_tmpdir "${CLONE_DIR}"
	readonly CLONE_DIR

	git clone -- "${BARE_SRCDIR}" "${CLONE_DIR}"

	rsync -a --delete --exclude='*.git' -- "${CLONE_DIR}/" "${SYSADM_DIR}/"
	chmod 755 "${SYSADM_DIR}"
}


# if upstream ssg receives an update, e.g., changes to ssg7, make sure
# to update the pathname to match!
#
# TODO: this should really check if the files have changed instead of
# replacing them each time the dotfiles repo is updated. the code as it
# is now is merely an easy solution, not a fantastic one.
update_ssg() {
	readonly BINDIR="${HOME}/bin"
	CLONE_DIR="$(mktemp -d)" || complain_tmpdir "${CLONE_DIR}"
	readonly CLONE_DIR

	git clone -- "${BARE_SRCDIR}" "${CLONE_DIR}"

	install -g git -o git -m 700 -- \
		"${CLONE_DIR}/.local/bin/rssg" "${BINDIR}/rssg"

	install -g git -o git -m 700 -- \
		"${CLONE_DIR}/.local/bin/ssg6" "${BINDIR}/ssg6"
}


# clone the repo and update the server information. generate the stagit
# page and copy some misc files.
clone_and_stagit() {
	rm -rf -- "${STAGIT_DIR}"
	mkdir -p -- "${STAGIT_DIR}"
	git clone --bare -- "${BARE_SRCDIR}" "${STAGIT_DIR}/.git"

	(cd "${STAGIT_DIR}/.git" && git update-server-info)

	(cd "${STAGIT_DIR}" && stagit -- "${BARE_SRCDIR}")

	cp -f -- "${STAGIT_DIR}/log.html" "${STAGIT_DIR}/index.html"
	cp -- "${WEBDIR}/stagit/style.css" "${STAGIT_DIR}/style.css"
}


if [ -z "${PWD##*.git}" ]; then
	readonly BARE_SRCDIR="${PWD}"

else
	readonly BARE_SRCDIR="${PWD}/.git"

fi


readonly OWNER='Ashlen'
readonly WEBSITE='https://amissing.link'
readonly WEBDIR="/var/www/htdocs/${WEBSITE##*//}"

STAGIT_DIR="${WEBDIR}/src/${PWD##*/}"
readonly STAGIT_DIR="${STAGIT_DIR%\.git}"


trap 'handle_tmpfiles' EXIT INT QUIT TERM


case "${PWD##*/}" in
	'website_md.git') readonly DESCRIPTION="${WEBSITE##*//}" ;;
	'sysadm.git') readonly DESCRIPTION='System Administration tools.' ;;
	'dotfiles.git') readonly DESCRIPTION='My OpenBSD configuration files.' ;;
	*) err 'No description set for current repo.' ;;
esac


# For metadata purposes.
echo "${OWNER}" > "${BARE_SRCDIR}/owner"
echo "${DESCRIPTION}" > "${BARE_SRCDIR}/description"
echo "${WEBSITE}/src/${STAGIT_DIR##*/}/.git" > "${BARE_SRCDIR}/url"


case "${PWD##*/}" in
	'website_md.git') gen_website ;;
	'sysadm.git') update_sysadm ;;
	'dotfiles.git') update_ssg ;;
	# if unrecognized, perform no repo specific actions
	*) ;;
esac


clone_and_stagit
