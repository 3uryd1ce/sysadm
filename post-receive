#!/bin/sh
# shellcheck disable=SC1090
# Copyright (c) 2020-2022 Ashlen <eurydice@riseup.net>

# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.

# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

set -e


err() {
  printf '%s\n' "$*" >&2
  exit 1
}


# change ${WEBSITE} and ${OWNER} to suit your needs.
readonly OWNER='Ashlen'
readonly WEBSITE='https://amissing.link'
readonly WEBDIR="/var/www/htdocs/${WEBSITE##*//}"

STAGIT_DIR="${WEBDIR}/src/$(basename -- "${PWD}" '.git')"
readonly STAGIT_DIR


# if ${PWD} is in the form of 'foo-bar.git', then
# ${BARE_SRCDIR} equals 'foo-bar.git'.
#
# otherwise, ${BARE_SRCDIR} is the present
# working directory with '/.git' appended.
assign_bare_srcdir() {
  if [ -z "${PWD##*.git}" ]; then
    readonly BARE_SRCDIR="${PWD}"

  else
    readonly BARE_SRCDIR="${PWD}/.git"

  fi
}


# choose a relevant description based on which repository is being
# interacted with.
assign_description() {
  case "${PWD##*/}" in
    'website_md.git') readonly DESCRIPTION="${WEBSITE##*//}"                     ;;
    'dotfiles.git')   readonly DESCRIPTION='My OpenBSD configuration files.'     ;;
    'sysadm.git')     readonly DESCRIPTION='System Administration tools.'        ;;
    *)                err 'No description set for current repo.'                 ;;
  esac
}


handle_tmpfiles() {
  rm -rf -- "${STAGIT_DIR:?}"
  mkdir -p -- "${STAGIT_DIR}"
}


add_metadata() {
  echo "${OWNER}" > "${BARE_SRCDIR}/owner"
  echo "${DESCRIPTION}" > "${BARE_SRCDIR}/description"
}


# only called if working with website_md. delete files exclusive to
# website_md, then clone the bare source directory. after that, render
# markdown to HTML, synchronize changes, and generate a news feed.
gen_website() {
    readonly STAGE_DIR="${HOME}/website-staging"
    readonly HTML_DIR="${HOME}/website-final"

    rm -f -- "${WEBDIR}/.files"
    rm -rf -- "${STAGE_DIR:?}" "${HTML_DIR:?}"

    mkdir -p -- "${HTML_DIR}"

    git clone -- "${BARE_SRCDIR}" "${STAGE_DIR}"

    "${HOME}/bin/ssg6" "${STAGE_DIR}" "${HTML_DIR}" "${OWNER}" \
      "${WEBSITE}" >/dev/null

    rsync -a --delete --exclude='*.git' --exclude='*src*' -- \
      "${HTML_DIR}/" "${WEBDIR}/"

    rsync -a --exclude='*.git' -- "${HTML_DIR}/src/" "${WEBDIR}/src/"

    "${HOME}/bin/rssg" "${STAGE_DIR}/index.md" \
      "Newsletter - ${DESCRIPTION}" > "${WEBDIR}/rss.xml"
}


# remove ${SYSADM_STAGE}, clone the source directory to ${SYSADM_STAGE},
# then synchronize changes to ${SYSADM_DIR} so as to minimize
# supervision/manual intervention.
update_sysadm() {
  readonly SYSADM_DIR='/etc/sysadm'
  readonly SYSADM_STAGE="${HOME}/sysadm-staging"

  rm -rf -- "${SYSADM_STAGE:?}"

  git clone -- "${BARE_SRCDIR}" "${SYSADM_STAGE}"

  rsync -a --delete --exclude='*.git' -- "${SYSADM_STAGE}/" "${SYSADM_DIR}/"
}


# if upstream ssg receives an update, e.g., changes to ssg7, make sure
# to update the pathname to match!
#
# TODO: this should really check if the files have changed instead of
# replacing them each time the dotfiles repo is updated. the code as it
# is now is merely an easy solution, not a fantastic one.
update_ssg() {
  readonly BINDIR="${HOME}/bin"
  readonly DOTFILES_STAGE="${HOME}/dotfiles-staging"

  rm -rf -- "${DOTFILES_STAGE:?}"

  git clone -- "${BARE_SRCDIR}" "${DOTFILES_STAGE}"

  install -g git -o git -m 700 -- \
    "${DOTFILES_STAGE}/.local/bin/rssg" "${BINDIR}/rssg"

  install -g git -o git -m 700 -- \
    "${DOTFILES_STAGE}/.local/bin/ssg6" "${BINDIR}/ssg6"
}


# clone the repo and update the server information. generate the stagit
# page and copy some misc files.
clone_and_stagit() {
  git clone --bare -- "${BARE_SRCDIR}" "${STAGIT_DIR}/.git"

  (cd "${STAGIT_DIR}/.git" && git update-server-info)

  (cd "${STAGIT_DIR}" && stagit -- "${BARE_SRCDIR}")

  cp -f -- "${STAGIT_DIR}/log.html" "${STAGIT_DIR}/index.html"
  cp -- "${WEBDIR}/stagit/style.css" "${STAGIT_DIR}/style.css"
}


assign_bare_srcdir
assign_description
handle_tmpfiles
add_metadata

case "${PWD##*/}" in
  'website_md.git') gen_website                                         ;;
  'sysadm.git')     update_sysadm                                       ;;
  'dotfiles.git')   update_ssg                                          ;;
  *)                # if unrecognized, perform no repo specific actions ;;
esac

clone_and_stagit
