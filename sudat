#!/bin/sh
# Copyright (c) 2022 Ashlen <eurydice@riseup.net>

# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.

# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

# Sync Upload Date and Access Time


err() {
  printf '%s\n' "$*" >&2
  exit 1
}


usage() {
  err "Sync Upload Date and Access Time (sudat):
${0##*/} [file_to_be_updated]

Note that sudat extracts the upload date from .info.json files provided
by yt-dlp(1). It MUST be identically named to file_to_be_updated except for the
extension."
}


check_deps() {
  while read -r dependency; do

    [ -x "$(command -v -- "${dependency}")" ] \
      || err "${dependency} not found in PATH or not executable."

  done
}


handle_date() {
  file_extension="${1##*.}"
  file_template="${1%."${file_extension}"}"

  for file in "${file_template}"*; do

    [ -f "${file}" ] || err "${file} isn't a file."
    [ -w "${file}" ] || err "${file} isn't writable."

  done


  jsonfile="${file_template}.info.json"
  [ -r "${jsonfile}" ] || err "${jsonfile} isn't readable."


  timestamp="$(jq -er .upload_date "${jsonfile}")" \
    || err "jq(1) failed on ${jsonfile}."


  # check if the timestamp is 8 digits (YYYYMMDD).
  case "${timestamp}" in

    [0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]) :      ;;

    *) err "${timestamp} isn't correctly formatted." ;;

  esac


  # needed to match touch(1) format
  timestamp="${timestamp}0000"

  # update the timestamps of everything with the same naming
  # convention.
  touch -t "${timestamp}" "${file_template}"*

}


while getopts q opt; do
  case "${opt}" in
    q) QUIET='yes' ;;
    *) usage       ;;
  esac
done

shift $((OPTIND - 1))


[ -z "$1" ] && case "${QUIET}" in
  'yes') exit  ;;
  *)     usage ;;
esac


echo 'jq' | check_deps


handle_date "$1"
