# These are my pf(4) rules for a router (an APU4D4 running OpenBSD).
# https://www.anthes.is/openbsd-router.html

# NOTE: I may update this later with IPv6 rules since I now support
# using IPv6 (and may also separate out rulesets: one for IPv4 only, one
# for dual stack). For now, it'll remain IPv4 only.

table <martians> {
	0.0.0.0/8 10.0.0.0/8 100.64.0.0/10 \
	127.0.0.0/8 169.254.0.0/16 172.16.0.0/12 \
	192.0.0.0/24 192.0.2.0/24 192.88.99.0/24 \
	192.168.0.0/16 198.18.0.0/15 198.51.100.0/24 \
	203.0.113.0/24 224.0.0.0/3 255.255.255.255/32 }

dumb_access_point = "x.x.x.x"
printer = "x.x.x.x"
vpn_endpoint_ip = "x.x.x.x"
vpn_dns = "x.x.x.x"
vpn_endpoint_port = "xxx"
ext_if = "em0"
int_if = "vport0"
icmp_types_global = "{ echoreq unreach paramprob timex }"
vpn_if = "wg0"
localnet = $int_if:network

set block-policy drop
set loginterface $vpn_if
set skip on lo

block log

# RFC3704.
block in log quick from urpf-failed

# Allows traffic needed for DHCP, serving as an exception to the
# martians rules below since those offering DHCP will usually be in those
# ranges.
pass out quick on $ext_if inet proto udp from port bootpc to port bootps
pass in quick on $ext_if inet proto udp from port bootps to port bootpc

block in log quick on { $ext_if $vpn_if } from <martians>
block out log quick on { $ext_if $vpn_if } to <martians>

# Letting clients use their own resolver makes the DNS sinkhole pointless.
block return in log quick proto { tcp udp } to !($int_if) port { domain domain-s }

# Just here for now to maintain consistency. I support IPv6, but haven't
# had a chance to update the rules here.
block quick inet6

# Basic traffic queueing, assuming 16Mb/s upload is the maximum
# expected bandwidth (leaving 5-10% headroom is a good idea).
queue outq on $vpn_if bandwidth 14M max 14M flows 1024 qlimit 1024 default

# https://www.benzedrine.ch/ackpri.html
match prio 3 set prio (3, 4)

# IP masquerading.
match out on $vpn_if inet from ($localnet) nat-to ($vpn_if)

# A subset of icmp (specified by $icmp_types_global) is allowed.
pass inet proto icmp icmp-type $icmp_types_global

# Allows traffic needed for the VPN.
pass out on $ext_if inet proto udp to $vpn_endpoint_ip port $vpn_endpoint_port

# Internet, via VPN.
pass out on $vpn_if inet proto { tcp udp }

# traceroute(1).
pass out inet proto udp to port 33433:33626

# Local network.
pass in on $int_if inet

# The dumb access point should never phone home.
# However, it can sync time using data from the router.
block return in log on $int_if from $dumb_access_point
pass in on $int_if inet proto udp from $dumb_access_point to ($int_if) port ntp

# Printer just needs a DHCP lease and that's it.
block return in log on $int_if from $printer
pass in on $int_if inet proto udp from $printer port bootpc to port bootps
