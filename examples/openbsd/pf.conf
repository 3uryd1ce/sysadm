# These are my pf(4) rules for a router (an APU4D4 running OpenBSD).
# https://amissing.link/openbsd-router.html

table <martians> {
	0.0.0.0/8 10.0.0.0/8 100.64.0.0/10 \
	127.0.0.0/8 169.254.0.0/16 172.16.0.0/12 \
	192.0.0.0/24 192.0.2.0/24 192.88.99.0/24 \
	192.168.0.0/16 198.18.0.0/15 198.51.100.0/24 \
	203.0.113.0/24 224.0.0.0/3 255.255.255.255/32 }

dumb_access_point = "x.x.x.x"
vpn_endpoint_ip = "x.x.x.x"
vpn_dns = "x.x.x.x"
vpn_endpoint_port = "xxx"
ext_if = "em0"
int_if = "vport0"
icmp_types = "{ echoreq unreach }"
vpn_if = "wg0"
localnet = $int_if:network

set block-policy drop
set loginterface $vpn_if
set skip on lo

block log

# rfc3704
block drop in log quick from urpf-failed

# Allows traffic needed for DHCP, serving as an exception to the
# martians rules below since those offering DHCP will usually be in those
# ranges.
pass out quick on $ext_if inet proto udp from port bootpc to port bootps
pass in quick on $ext_if inet proto udp from port bootps to port bootpc

block drop in log quick on { $ext_if $vpn_if } from <martians>
block drop out log quick on { $ext_if $vpn_if } to <martians>

# Letting clients use their own resolver makes the DNS sinkhole pointless.
block return in log quick proto { tcp udp } to !($int_if) port { domain domain-s }

# This router doesn't handle IPv6 currently.
block drop quick inet6

# Basic traffic queueing, assuming 16Mb/s upload is the maximum
# expected bandwidth (leaving 5-10% headroom is a good idea).
#queue outq on $vpn_if bandwidth 14M max 14M flows 1024 qlimit 1024 default

# Hierarchical traffic queueing for 16Mb/s upload. MUST be upload and
# not download.
#
# Some resources:
#
# QUEUEING section in pf.conf(5)
# https://dataswamp.org/~solene/2021-08-30-openbsd-qos-lan.html
queue main on $vpn_if bandwidth 14400K max 14400K
	queue unknown parent main bandwidth 2580K qlimit 100 default
	queue web parent main bandwidth 4500K qlimit 150
	queue udp parent main bandwidth 3800K qlimit 100
	queue ackp parent main bandwidth 1200K
		queue ack_web parent ackp bandwidth 600K flows 256
		queue ack parent ackp bandwidth 600K flows 256
	queue ssh parent main bandwidth 2100K
		queue ssh_bulk parent ssh bandwidth 1600K
		queue ssh_interactive parent ssh bandwidth 500K flows 64
	queue mail parent main bandwidth 200K
	queue ntp parent main bandwidth 10K
	queue icmp parent main bandwidth 10K

match inet proto tcp from $localnet queue (unknown, ack)
match inet proto tcp from $localnet to port { www https 9001 9030 8080 } queue (web, ack_web)
match inet proto tcp from $localnet to port { smtp submission submissions imap imaps pop3 pop3s } queue (mail, ack)
match inet proto tcp from $localnet to port ssh queue (ssh_bulk, ssh_interactive)
match inet proto udp from $localnet queue udp
match inet proto udp from $localnet to port ntp queue ntp
match inet proto icmp from $localnet queue icmp

# pppoe(4)
match on pppoe0 scrub (max-mss 1440)

# https://www.benzedrine.ch/ackpri.html
match out on $vpn_if inet set prio (4, 6)
match out on $vpn_if inet proto tcp to port ssh set prio (5, 7)

# IP masquerading.
match out on $vpn_if inet from ($localnet) nat-to ($vpn_if)

# Allows traffic needed for the VPN.
pass out on $ext_if inet proto udp to $vpn_endpoint_ip port $vpn_endpoint_port

# Internet, via VPN.
pass out on $vpn_if inet proto { tcp udp }

# A subset of icmp (specified by $icmp_types) is allowed.
pass inet proto icmp icmp-type $icmp_types

pass in on $int_if inet

# The dumb access point should never phone home.
# However, it can sync time using data from the router.
block return in log on $int_if from $dumb_access_point
pass in on $int_if inet proto udp from $dumb_access_point to ($int_if) port ntp
