#!/usr/bin/env sh
# shellcheck disable=SC1090
set -e
# Copyright (c) 2020-2021 Ashlen <eurydice@riseup.net>

# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.

# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

# check that the library file is readable. if it is, source it so its
# functions are available. if not, exit due to potentially unpredictable
# behavior.
readonly library='/etc/sysadm/common.sh'
if [ -r "${library}" ]; then
  . "${library}"
else
  cat >&2 <<EOF
${library} doesn't exist or isn't readable.
${0##*/} may not function correctly without it; exiting for safety.
EOF
  exit 1
fi

usage() {
  cat >&2 <<EOF
${0##*/} requires ${args_needed} argument(s).

usage:
${0##*/} [domain name]
EOF
  exit 1
}

# if acme-client.conf(5) exists as a file in /etc/, run acme-client(1)
# to refresh the TLS certificate for $1.
#
# if a TLS certificate exists as a file in /etc/ssl/ with $1 as its
# name, validate it against its OCSP responder with ocspcheck(8) and
# save the response to /etc/ssl/$1.ocsp.
#
# $1 is a chosen domain name.
cert_maintenance() {
  if [ -f '/etc/acme-client.conf' ]; then
    acme-client -- "$1" >/dev/null
  else
    err "acme-client.conf(5) wasn't found."
  fi

  if [ -f "/etc/ssl/$1.pem" ]; then
    # if your provider supports the use of OCSP nonces, don't use -N
    ocspcheck -No "/etc/ssl/$1.ocsp" -- "/etc/ssl/$1.pem" >/dev/null
  else
    err "/etc/ssl/$1.pem wasn't found."
  fi
}

# reload httpd and relayd if they're enabled.
reload_daemons() {
  for daemon in 'httpd' 'relayd'; do
    if [ "$(rcctl get "${daemon}" flags)" != 'NO' ]; then
      rcctl reload "${daemon}" >/dev/null
    fi
  done
}

prereqs() {
  readonly args_needed=1
  [ "$#" = "${args_needed}" ] || usage
  must_be_root
}

# first check whether there's an appropriate number of arguments and
# whether the script has root privileges. then execute
# cert_maintenance() and reload_daemons() if cert_maintenance()
# succeeds.
main() {
  prereqs "$@"
  cert_maintenance "$1" && reload_daemons
}

main "$@"
